// HTML RELATED STUFFS
1/ Create html element & insert the element
a ) target a parent by [querySelector];
b ) now create a container for new element
  b.1 ) const child = document.createElement("div")
  b.2 ) [optional] add a class name by [child.classList.add("[className from css"])]
  b.3 ) add content [child.textContent = "our message"]
  b.4 ) [alternative] or we can try add html like this
    b.4.1 ) child.innerHTML = "html like content (can be also hard-Coded css class)
  b.5 ) add this "child" element to the parent container
    b.5.1 ) parent.append(child)
      add the child element as a last child
    b.5.2 ) parent.prepend(child)
      add the child element as first child
    b.5.3 ) parent.before(child)
      just a before sibling (before the parent element)
    b.5.4 ) parent.after(child)
      just a next sibling (after the parent element)

2/ delete any element

a ) select the element by querySelector
b ) element.remove()

3/ attribute read and write

[only works for standard attribute]
a ) select the element
b ) console.log(element.[attribute name])

[standard & non-standard attribute, READ ONLY]
a ) console.log(element.getAttribute("[attribute name]"))

[standard & non-standard attribute, WRITE ONLY]
a ) element.setAttribute("[attribute name]", "[modify value]")

[data-TYPE-ATTRIBUTE-NAME]
a ) set any html element attribute as "data-author="nio pai"
b ) console.log(element.dataset.author)

//////////////////////
// CSS RELATED STUFFS


1/ style any specific property

a ) first select the element
b ) element.style.[css property name with camelCase] = "css values with unit"


2 / read css property for specific element
//// note : by those method, we can read css property, we can also use them to edit any property

[if inline styles available] --rw
a ) console.log(element.style.[propertyName])

[if inline styles not available] --r
a ) console.log(getComputedStyle(element).[css property name])

[css custom property / css variable] --w
a ) document.documentElement.style.setProperty("[css custom property from ":root" selector"], "modify value")





3/ css class managing

[add css class]
a ) element.classList.add("any css pre defined class name", "[optional] additional css class name")
  add css class to the specific element

[remove css class]
a ) element.classList.remove("css class name")
  remove spcified class from specific element
  *** When removing a class that doesn’t exist JavaScript won’t throw an error

[toggle css class existance]
a ) element.classList.toggle("css class name")
  if the class name does not exist, then the class will be added.
  or, if the class name exist, then it will be removed

[check certain class name existance]
a ) element.classList.contains("class name")
  check whether the css class name exist for the element or not

[override existing css class]
a ) element.className = "css class name"
  override existing css class name, can only use one class name per element
